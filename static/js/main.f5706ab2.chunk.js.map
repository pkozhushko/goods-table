{"version":3,"sources":["components/Items.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Items","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","products","arr","prevProps","searchValue","query","filter","el","name","toLowerCase","indexOf","setState","length","react_default","a","createElement","className","react","map","item","key","id","price","quantity","Component","Table","handleSearch","e","value","target","test","type","placeholder","onChange","components_Items","App","components_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAIMA,qBACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAUC,GAHKT,kFAOAU,GACjB,GAAIP,KAAKJ,MAAMY,cAAgBD,EAAUC,YAAa,CACpD,IAAIC,EAAQT,KAAKJ,MAAMY,YACnBE,EAASJ,EAAII,OAAO,SAASC,GAE/B,OAAgC,IADrBA,EAAGC,KAAKC,cACPC,QAAQL,KAEtBT,KAAKe,SAAS,CAAEV,SAAUK,sCAK5B,OAAmC,IAA/BV,KAAKI,MAAMC,SAASW,OAEpBC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,KACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,MAKJH,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACIrB,KAAKI,MAAMC,SAASiB,IAAI,SAAAC,GAAI,OAC1BN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,EAAKE,GAAIL,UAAU,QAC1BH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYG,EAAKE,IAC/BR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcG,EAAKX,MACjCK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeG,EAAKG,OAClCT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBG,EAAKI,qBArCjCC,cA8CdtB,EAAM,CACV,CACEmB,GAAM,EACNb,KAAQ,iBACRc,MAAS,IACTC,SAAY,GAEd,CACEF,GAAM,EACNb,KAAQ,YACRc,MAAS,IACTC,SAAY,GAEd,CACEF,GAAM,EACNb,KAAQ,qBACRc,MAAS,IACTC,SAAY,IAIDhC,IC7BAkC,oNArCbzB,MAAQ,CACNI,YAAa,MAGfsB,aAAe,SAAAC,GACb,IAAMC,EAAQD,EAAEE,OAAOD,MAAMnB,cACzB,KAAKqB,KAAKF,GACZnC,EAAKkB,SAAS,CAACP,YAAawB,IAE5BnC,EAAKkB,SAAS,CAACP,YAAa,8EAK9B,OACES,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,OAAOf,UAAU,SAASgB,YAAY,SAASJ,MAAOhC,KAAKI,MAAMI,YAAa6B,SAAUrC,KAAK8B,eACzGb,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eACdH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,wBAILF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eACfH,EAAAC,EAAAC,cAACmB,EAAD,CAAO9B,YAAcR,KAAKI,MAAMI,wBA7BzBoB,cCOLW,MARf,WACE,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqB,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f5706ab2.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport '../css/items.css';\r\n\r\n\r\nclass Items extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      products: arr\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.searchValue !== prevProps.searchValue) {\r\n      let query = this.props.searchValue;\r\n      let filter = arr.filter(function(el) {\r\n        var name = el.name.toLowerCase();\r\n        return name.indexOf(query) !== -1;\r\n      });\r\n      this.setState({ products: filter });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.products.length === 0) {\r\n      return (\r\n        <tr>\r\n            <td className=\"item__id\">-</td>\r\n            <td className=\"item__name\">-</td>\r\n            <td className=\"item__price\">-</td>\r\n            <td className=\"item__quantity\">-</td>\r\n        </tr>\r\n      )\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          { this.state.products.map(item => (\r\n              <tr key={item.id} className=\"item\">\r\n                <td className=\"item__id\">{item.id}</td>\r\n                <td className=\"item__name\">{item.name}</td>\r\n                <td className=\"item__price\">{item.price}</td>\r\n                <td className=\"item__quantity\">{item.quantity}</td>\r\n              </tr>\r\n          ))}\r\n        </Fragment>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nconst arr = [\r\n  {\r\n    \"id\": 1,\r\n    \"name\": \"Play Station 4\",\r\n    \"price\": 500.00,\r\n    \"quantity\": 3,\r\n  },\r\n  {\r\n    \"id\": 2,\r\n    \"name\": \"iPhone XS\",\r\n    \"price\": 1000.00,\r\n    \"quantity\": 2,\r\n  },\r\n  {\r\n    \"id\": 3,\r\n    \"name\": \"Samsung Galaxy S10\",\r\n    \"price\": 1000.00,\r\n    \"quantity\": 5,\r\n  }\r\n]\r\n\r\nexport default Items;\r\n","import React, { Component } from 'react';\r\nimport Items from './Items';\r\nimport '../css/table.css';\r\n\r\nclass Table extends Component {\r\n  state = {\r\n    searchValue: ''\r\n  }\r\n\r\n  handleSearch = e => {\r\n    const value = e.target.value.toLowerCase();\r\n    if (/\\S/.test(value)) {                         // is value 'a space'?\r\n      this.setState({searchValue: value});\r\n    } else {\r\n      this.setState({searchValue: ''});\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"table-wrapper\">\r\n        <input type=\"text\" className=\"search\" placeholder=\"Search\" value={this.state.searchValue} onChange={this.handleSearch} />\r\n        <table className=\"table\">\r\n           <thead className=\"table__head\">\r\n              <tr>\r\n                <td>ID</td>\r\n                <td>Name</td>\r\n                <td>Price</td>\r\n                <td>Quantity</td>\r\n              </tr>\r\n           </thead>\r\n\r\n           <tbody className=\"table__body\">\r\n             <Items searchValue={ this.state.searchValue } />\r\n           </tbody>\r\n\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react';\nimport Table from './components/Table'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}